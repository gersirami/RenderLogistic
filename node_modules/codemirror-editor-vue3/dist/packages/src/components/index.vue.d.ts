import type { PropType } from "vue";
import type { Editor, EditorConfiguration } from "codemirror";
declare const _sfc_main: import("vue").DefineComponent<{
    value: {
        type: PropType<string>;
        default: string;
    };
    options: {
        type: PropType<EditorConfiguration>;
        default: () => {
            mode: string;
            theme: string;
            lineNumbers: boolean;
            smartIndent: boolean;
            indentUnit: number;
            styleActiveLine: boolean;
        };
    };
    globalOptions: {
        type: PropType<EditorConfiguration>;
        default: () => {
            mode: string;
            theme: string;
            lineNumbers: boolean;
            smartIndent: boolean;
            indentUnit: number;
            styleActiveLine: boolean;
        };
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
    border: {
        type: PropType<boolean>;
        default: boolean;
    };
    width: {
        type: PropType<string | number | null>;
        default: null;
    };
    height: {
        type: PropType<string | number | null>;
        default: null;
    };
    originalStyle: {
        type: PropType<boolean>;
        default: boolean;
    };
    keepCursorInEnd: {
        type: PropType<boolean>;
        default: boolean;
    };
    merge: {
        type: PropType<boolean>;
        default: boolean;
    };
    name: {
        type: PropType<string>;
        default: string;
    };
    marker: {
        type: PropType<() => HTMLElement>;
        default: () => null;
    };
    unseenLines: {
        type: PropType<any[]>;
        default: () => never[];
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    changes: (instance: Editor, changes: import("codemirror").EditorChange[]) => void;
    beforeChange: (instance: Editor, changeObj: import("codemirror").EditorChangeCancellable) => void;
    cursorActivity: (instance: Editor) => void;
    keyHandled: (instance: Editor, name: string, eventObj: Event) => void;
    inputRead: (instance: Editor, changeObj: import("codemirror").EditorChange) => void;
    electricInput: (instance: Editor, line: number) => void;
    beforeSelectionChange: (instance: Editor, obj: import("codemirror").EditorSelectionChange) => void;
    viewportChange: (instance: Editor, from: number, to: number) => void;
    swapDoc: (instance: Editor, oldDoc: import("codemirror").Doc) => void;
    gutterClick: (instance: Editor, line: number, gutter: string, clickEvent: Event) => void;
    gutterContextMenu: (instance: Editor, line: number, gutter: string, contextMenuEvent: MouseEvent) => void;
    focus: (instance: Editor, eventObj: FocusEvent) => void;
    blur: (instance: Editor, eventObj: FocusEvent) => void;
    scroll: (instance: Editor) => void;
    refresh: (instance: Editor) => void;
    optionChange: (instance: Editor, option: keyof EditorConfiguration) => void;
    scrollCursorIntoView: (instance: Editor, eventObj: Event) => void;
    update: (instance: Editor) => void;
    renderLine: (instance: Editor, lineHandle: import("codemirror").LineHandle, element: HTMLElement) => void;
    overwriteToggle: (instance: Editor, overwrite: boolean) => void;
    "update:value": (value: string) => any;
    change: (value: string, cm: Editor) => {
        value: string;
        cm: Editor;
    };
    input: (value: string) => any;
    ready: (cm: Editor) => Editor;
}, string, import("vue").PublicProps, Readonly<globalThis.ExtractPropTypes<{
    value: {
        type: PropType<string>;
        default: string;
    };
    options: {
        type: PropType<EditorConfiguration>;
        default: () => {
            mode: string;
            theme: string;
            lineNumbers: boolean;
            smartIndent: boolean;
            indentUnit: number;
            styleActiveLine: boolean;
        };
    };
    globalOptions: {
        type: PropType<EditorConfiguration>;
        default: () => {
            mode: string;
            theme: string;
            lineNumbers: boolean;
            smartIndent: boolean;
            indentUnit: number;
            styleActiveLine: boolean;
        };
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
    border: {
        type: PropType<boolean>;
        default: boolean;
    };
    width: {
        type: PropType<string | number | null>;
        default: null;
    };
    height: {
        type: PropType<string | number | null>;
        default: null;
    };
    originalStyle: {
        type: PropType<boolean>;
        default: boolean;
    };
    keepCursorInEnd: {
        type: PropType<boolean>;
        default: boolean;
    };
    merge: {
        type: PropType<boolean>;
        default: boolean;
    };
    name: {
        type: PropType<string>;
        default: string;
    };
    marker: {
        type: PropType<() => HTMLElement>;
        default: () => null;
    };
    unseenLines: {
        type: PropType<any[]>;
        default: () => never[];
    };
}>> & {
    onChange?: ((value: string, cm: Editor) => any) | undefined;
    onChanges?: ((instance: Editor, changes: import("codemirror").EditorChange[]) => any) | undefined;
    onBeforeChange?: ((instance: Editor, changeObj: import("codemirror").EditorChangeCancellable) => any) | undefined;
    onCursorActivity?: ((instance: Editor) => any) | undefined;
    onKeyHandled?: ((instance: Editor, name: string, eventObj: Event) => any) | undefined;
    onInputRead?: ((instance: Editor, changeObj: import("codemirror").EditorChange) => any) | undefined;
    onElectricInput?: ((instance: Editor, line: number) => any) | undefined;
    onBeforeSelectionChange?: ((instance: Editor, obj: import("codemirror").EditorSelectionChange) => any) | undefined;
    onViewportChange?: ((instance: Editor, from: number, to: number) => any) | undefined;
    onSwapDoc?: ((instance: Editor, oldDoc: import("codemirror").Doc) => any) | undefined;
    onGutterClick?: ((instance: Editor, line: number, gutter: string, clickEvent: Event) => any) | undefined;
    onGutterContextMenu?: ((instance: Editor, line: number, gutter: string, contextMenuEvent: MouseEvent) => any) | undefined;
    onFocus?: ((instance: Editor, eventObj: FocusEvent) => any) | undefined;
    onBlur?: ((instance: Editor, eventObj: FocusEvent) => any) | undefined;
    onScroll?: ((instance: Editor) => any) | undefined;
    onRefresh?: ((instance: Editor) => any) | undefined;
    onOptionChange?: ((instance: Editor, option: keyof EditorConfiguration) => any) | undefined;
    onScrollCursorIntoView?: ((instance: Editor, eventObj: Event) => any) | undefined;
    onUpdate?: ((instance: Editor) => any) | undefined;
    onRenderLine?: ((instance: Editor, lineHandle: import("codemirror").LineHandle, element: HTMLElement) => any) | undefined;
    onOverwriteToggle?: ((instance: Editor, overwrite: boolean) => any) | undefined;
    "onUpdate:value"?: ((value: string) => any) | undefined;
    onInput?: ((value: string) => any) | undefined;
    onReady?: ((cm: Editor) => any) | undefined;
}, {
    value: string;
    options: EditorConfiguration;
    globalOptions: EditorConfiguration;
    placeholder: string;
    border: boolean;
    width: string | number | null;
    height: string | number | null;
    originalStyle: boolean;
    keepCursorInEnd: boolean;
    merge: boolean;
    name: string;
    marker: () => HTMLElement;
    unseenLines: any[];
}, {}>;
export default _sfc_main;
