import type { PropType } from "vue";
import type { Editor, EditorConfiguration } from "codemirror";
declare const _sfc_main: import("vue").DefineComponent<{
    name: {
        type: PropType<string>;
        default: string;
    };
    value: {
        type: PropType<string>;
        default: string;
    };
    content: {
        type: PropType<string>;
        default: string;
    };
    options: {
        type: PropType<EditorConfiguration>;
        default: () => {};
    };
    cminstance: {
        type: PropType<Editor | null>;
        default: () => null;
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
}, {
    textarea: globalThis.Ref<any>;
    initialize: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    ready: (instance: Editor) => Editor | null;
    "update:cminstance": (instance: Editor) => Editor | null;
}, string, import("vue").PublicProps, Readonly<globalThis.ExtractPropTypes<{
    name: {
        type: PropType<string>;
        default: string;
    };
    value: {
        type: PropType<string>;
        default: string;
    };
    content: {
        type: PropType<string>;
        default: string;
    };
    options: {
        type: PropType<EditorConfiguration>;
        default: () => {};
    };
    cminstance: {
        type: PropType<Editor | null>;
        default: () => null;
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
}>> & {
    onReady?: ((instance: Editor) => any) | undefined;
    "onUpdate:cminstance"?: ((instance: Editor) => any) | undefined;
}, {
    value: string;
    options: EditorConfiguration;
    placeholder: string;
    name: string;
    content: string;
    cminstance: Editor | null;
}, {}>;
export default _sfc_main;
