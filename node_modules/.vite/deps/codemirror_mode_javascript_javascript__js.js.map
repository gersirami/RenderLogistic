{
  "version": 3,
  "sources": ["../../codemirror/mode/javascript/javascript.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod(require(\"../../lib/codemirror\"));\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"../../lib/codemirror\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n\"use strict\";\r\n\r\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\r\n  var indentUnit = config.indentUnit;\r\n  var statementIndent = parserConfig.statementIndent;\r\n  var jsonldMode = parserConfig.jsonld;\r\n  var jsonMode = parserConfig.json || jsonldMode;\r\n  var trackScope = parserConfig.trackScope !== false\r\n  var isTS = parserConfig.typescript;\r\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\r\n\r\n  // Tokenizer\r\n\r\n  var keywords = function(){\r\n    function kw(type) {return {type: type, style: \"keyword\"};}\r\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\r\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\r\n\r\n    return {\r\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\r\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\r\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\r\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\r\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\r\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\r\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\r\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\r\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\r\n      \"await\": C\r\n    };\r\n  }();\r\n\r\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\r\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\r\n\r\n  function readRegexp(stream) {\r\n    var escaped = false, next, inSet = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (!escaped) {\r\n        if (next == \"/\" && !inSet) return;\r\n        if (next == \"[\") inSet = true;\r\n        else if (inSet && next == \"]\") inSet = false;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n  }\r\n\r\n  // Used as scratch variables to communicate multiple values without\r\n  // consing up tons of objects.\r\n  var type, content;\r\n  function ret(tp, style, cont) {\r\n    type = tp; content = cont;\r\n    return style;\r\n  }\r\n  function tokenBase(stream, state) {\r\n    var ch = stream.next();\r\n    if (ch == '\"' || ch == \"'\") {\r\n      state.tokenize = tokenString(ch);\r\n      return state.tokenize(stream, state);\r\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\r\n      return ret(\"number\", \"number\");\r\n    } else if (ch == \".\" && stream.match(\"..\")) {\r\n      return ret(\"spread\", \"meta\");\r\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\r\n      return ret(ch);\r\n    } else if (ch == \"=\" && stream.eat(\">\")) {\r\n      return ret(\"=>\", \"operator\");\r\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\r\n      return ret(\"number\", \"number\");\r\n    } else if (/\\d/.test(ch)) {\r\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\r\n      return ret(\"number\", \"number\");\r\n    } else if (ch == \"/\") {\r\n      if (stream.eat(\"*\")) {\r\n        state.tokenize = tokenComment;\r\n        return tokenComment(stream, state);\r\n      } else if (stream.eat(\"/\")) {\r\n        stream.skipToEnd();\r\n        return ret(\"comment\", \"comment\");\r\n      } else if (expressionAllowed(stream, state, 1)) {\r\n        readRegexp(stream);\r\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\r\n        return ret(\"regexp\", \"string-2\");\r\n      } else {\r\n        stream.eat(\"=\");\r\n        return ret(\"operator\", \"operator\", stream.current());\r\n      }\r\n    } else if (ch == \"`\") {\r\n      state.tokenize = tokenQuasi;\r\n      return tokenQuasi(stream, state);\r\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\r\n      stream.skipToEnd();\r\n      return ret(\"meta\", \"meta\");\r\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\r\n      return ret(\"variable\", \"property\")\r\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\r\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\r\n      stream.skipToEnd()\r\n      return ret(\"comment\", \"comment\")\r\n    } else if (isOperatorChar.test(ch)) {\r\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\r\n        if (stream.eat(\"=\")) {\r\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\r\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\r\n          stream.eat(ch)\r\n          if (ch == \">\") stream.eat(ch)\r\n        }\r\n      }\r\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\r\n      return ret(\"operator\", \"operator\", stream.current());\r\n    } else if (wordRE.test(ch)) {\r\n      stream.eatWhile(wordRE);\r\n      var word = stream.current()\r\n      if (state.lastType != \".\") {\r\n        if (keywords.propertyIsEnumerable(word)) {\r\n          var kw = keywords[word]\r\n          return ret(kw.type, kw.style, word)\r\n        }\r\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\r\n          return ret(\"async\", \"keyword\", word)\r\n      }\r\n      return ret(\"variable\", \"variable\", word)\r\n    }\r\n  }\r\n\r\n  function tokenString(quote) {\r\n    return function(stream, state) {\r\n      var escaped = false, next;\r\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\r\n        state.tokenize = tokenBase;\r\n        return ret(\"jsonld-keyword\", \"meta\");\r\n      }\r\n      while ((next = stream.next()) != null) {\r\n        if (next == quote && !escaped) break;\r\n        escaped = !escaped && next == \"\\\\\";\r\n      }\r\n      if (!escaped) state.tokenize = tokenBase;\r\n      return ret(\"string\", \"string\");\r\n    };\r\n  }\r\n\r\n  function tokenComment(stream, state) {\r\n    var maybeEnd = false, ch;\r\n    while (ch = stream.next()) {\r\n      if (ch == \"/\" && maybeEnd) {\r\n        state.tokenize = tokenBase;\r\n        break;\r\n      }\r\n      maybeEnd = (ch == \"*\");\r\n    }\r\n    return ret(\"comment\", \"comment\");\r\n  }\r\n\r\n  function tokenQuasi(stream, state) {\r\n    var escaped = false, next;\r\n    while ((next = stream.next()) != null) {\r\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\r\n        state.tokenize = tokenBase;\r\n        break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    return ret(\"quasi\", \"string-2\", stream.current());\r\n  }\r\n\r\n  var brackets = \"([{}])\";\r\n  // This is a crude lookahead trick to try and notice that we're\r\n  // parsing the argument patterns for a fat-arrow function before we\r\n  // actually hit the arrow token. It only works if the arrow is on\r\n  // the same line as the arguments and there's no strange noise\r\n  // (comments) in between. Fallback is to only notice when we hit the\r\n  // arrow, and not declare the arguments as locals for the arrow\r\n  // body.\r\n  function findFatArrow(stream, state) {\r\n    if (state.fatArrowAt) state.fatArrowAt = null;\r\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\r\n    if (arrow < 0) return;\r\n\r\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\r\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\r\n      if (m) arrow = m.index\r\n    }\r\n\r\n    var depth = 0, sawSomething = false;\r\n    for (var pos = arrow - 1; pos >= 0; --pos) {\r\n      var ch = stream.string.charAt(pos);\r\n      var bracket = brackets.indexOf(ch);\r\n      if (bracket >= 0 && bracket < 3) {\r\n        if (!depth) { ++pos; break; }\r\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\r\n      } else if (bracket >= 3 && bracket < 6) {\r\n        ++depth;\r\n      } else if (wordRE.test(ch)) {\r\n        sawSomething = true;\r\n      } else if (/[\"'\\/`]/.test(ch)) {\r\n        for (;; --pos) {\r\n          if (pos == 0) return\r\n          var next = stream.string.charAt(pos - 1)\r\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\r\n        }\r\n      } else if (sawSomething && !depth) {\r\n        ++pos;\r\n        break;\r\n      }\r\n    }\r\n    if (sawSomething && !depth) state.fatArrowAt = pos;\r\n  }\r\n\r\n  // Parser\r\n\r\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\r\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\r\n\r\n  function JSLexical(indented, column, type, align, prev, info) {\r\n    this.indented = indented;\r\n    this.column = column;\r\n    this.type = type;\r\n    this.prev = prev;\r\n    this.info = info;\r\n    if (align != null) this.align = align;\r\n  }\r\n\r\n  function inScope(state, varname) {\r\n    if (!trackScope) return false\r\n    for (var v = state.localVars; v; v = v.next)\r\n      if (v.name == varname) return true;\r\n    for (var cx = state.context; cx; cx = cx.prev) {\r\n      for (var v = cx.vars; v; v = v.next)\r\n        if (v.name == varname) return true;\r\n    }\r\n  }\r\n\r\n  function parseJS(state, style, type, content, stream) {\r\n    var cc = state.cc;\r\n    // Communicate our context to the combinators.\r\n    // (Less wasteful than consing up a hundred closures on every call.)\r\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\r\n\r\n    if (!state.lexical.hasOwnProperty(\"align\"))\r\n      state.lexical.align = true;\r\n\r\n    while(true) {\r\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\r\n      if (combinator(type, content)) {\r\n        while(cc.length && cc[cc.length - 1].lex)\r\n          cc.pop()();\r\n        if (cx.marked) return cx.marked;\r\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\r\n        return style;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Combinator utils\r\n\r\n  var cx = {state: null, column: null, marked: null, cc: null};\r\n  function pass() {\r\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\r\n  }\r\n  function cont() {\r\n    pass.apply(null, arguments);\r\n    return true;\r\n  }\r\n  function inList(name, list) {\r\n    for (var v = list; v; v = v.next) if (v.name == name) return true\r\n    return false;\r\n  }\r\n  function register(varname) {\r\n    var state = cx.state;\r\n    cx.marked = \"def\";\r\n    if (!trackScope) return\r\n    if (state.context) {\r\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\r\n        // FIXME function decls are also not block scoped\r\n        var newContext = registerVarScoped(varname, state.context)\r\n        if (newContext != null) {\r\n          state.context = newContext\r\n          return\r\n        }\r\n      } else if (!inList(varname, state.localVars)) {\r\n        state.localVars = new Var(varname, state.localVars)\r\n        return\r\n      }\r\n    }\r\n    // Fall through means this is global\r\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\r\n      state.globalVars = new Var(varname, state.globalVars)\r\n  }\r\n  function registerVarScoped(varname, context) {\r\n    if (!context) {\r\n      return null\r\n    } else if (context.block) {\r\n      var inner = registerVarScoped(varname, context.prev)\r\n      if (!inner) return null\r\n      if (inner == context.prev) return context\r\n      return new Context(inner, context.vars, true)\r\n    } else if (inList(varname, context.vars)) {\r\n      return context\r\n    } else {\r\n      return new Context(context.prev, new Var(varname, context.vars), false)\r\n    }\r\n  }\r\n\r\n  function isModifier(name) {\r\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\r\n  }\r\n\r\n  // Combinators\r\n\r\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\r\n  function Var(name, next) { this.name = name; this.next = next }\r\n\r\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\r\n  function pushcontext() {\r\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\r\n    cx.state.localVars = defaultVars\r\n  }\r\n  function pushblockcontext() {\r\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\r\n    cx.state.localVars = null\r\n  }\r\n  pushcontext.lex = pushblockcontext.lex = true\r\n  function popcontext() {\r\n    cx.state.localVars = cx.state.context.vars\r\n    cx.state.context = cx.state.context.prev\r\n  }\r\n  popcontext.lex = true\r\n  function pushlex(type, info) {\r\n    var result = function() {\r\n      var state = cx.state, indent = state.indented;\r\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\r\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\r\n        indent = outer.indented;\r\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\r\n    };\r\n    result.lex = true;\r\n    return result;\r\n  }\r\n  function poplex() {\r\n    var state = cx.state;\r\n    if (state.lexical.prev) {\r\n      if (state.lexical.type == \")\")\r\n        state.indented = state.lexical.indented;\r\n      state.lexical = state.lexical.prev;\r\n    }\r\n  }\r\n  poplex.lex = true;\r\n\r\n  function expect(wanted) {\r\n    function exp(type) {\r\n      if (type == wanted) return cont();\r\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\r\n      else return cont(exp);\r\n    };\r\n    return exp;\r\n  }\r\n\r\n  function statement(type, value) {\r\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\r\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\r\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\r\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\r\n    if (type == \"debugger\") return cont(expect(\";\"));\r\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\r\n    if (type == \";\") return cont();\r\n    if (type == \"if\") {\r\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\r\n        cx.state.cc.pop()();\r\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\r\n    }\r\n    if (type == \"function\") return cont(functiondef);\r\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\r\n    if (type == \"class\" || (isTS && value == \"interface\")) {\r\n      cx.marked = \"keyword\"\r\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\r\n    }\r\n    if (type == \"variable\") {\r\n      if (isTS && value == \"declare\") {\r\n        cx.marked = \"keyword\"\r\n        return cont(statement)\r\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\r\n        cx.marked = \"keyword\"\r\n        if (value == \"enum\") return cont(enumdef);\r\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\r\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\r\n      } else if (isTS && value == \"namespace\") {\r\n        cx.marked = \"keyword\"\r\n        return cont(pushlex(\"form\"), expression, statement, poplex)\r\n      } else if (isTS && value == \"abstract\") {\r\n        cx.marked = \"keyword\"\r\n        return cont(statement)\r\n      } else {\r\n        return cont(pushlex(\"stat\"), maybelabel);\r\n      }\r\n    }\r\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\r\n                                      block, poplex, poplex, popcontext);\r\n    if (type == \"case\") return cont(expression, expect(\":\"));\r\n    if (type == \"default\") return cont(expect(\":\"));\r\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\r\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\r\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\r\n    if (type == \"async\") return cont(statement)\r\n    if (value == \"@\") return cont(expression, statement)\r\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\r\n  }\r\n  function maybeCatchBinding(type) {\r\n    if (type == \"(\") return cont(funarg, expect(\")\"))\r\n  }\r\n  function expression(type, value) {\r\n    return expressionInner(type, value, false);\r\n  }\r\n  function expressionNoComma(type, value) {\r\n    return expressionInner(type, value, true);\r\n  }\r\n  function parenExpr(type) {\r\n    if (type != \"(\") return pass()\r\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\r\n  }\r\n  function expressionInner(type, value, noComma) {\r\n    if (cx.state.fatArrowAt == cx.stream.start) {\r\n      var body = noComma ? arrowBodyNoComma : arrowBody;\r\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\r\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\r\n    }\r\n\r\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\r\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\r\n    if (type == \"function\") return cont(functiondef, maybeop);\r\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\r\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\r\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\r\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\r\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\r\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\r\n    if (type == \"quasi\") return pass(quasi, maybeop);\r\n    if (type == \"new\") return cont(maybeTarget(noComma));\r\n    return cont();\r\n  }\r\n  function maybeexpression(type) {\r\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\r\n    return pass(expression);\r\n  }\r\n\r\n  function maybeoperatorComma(type, value) {\r\n    if (type == \",\") return cont(maybeexpression);\r\n    return maybeoperatorNoComma(type, value, false);\r\n  }\r\n  function maybeoperatorNoComma(type, value, noComma) {\r\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\r\n    var expr = noComma == false ? expression : expressionNoComma;\r\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\r\n    if (type == \"operator\") {\r\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\r\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\r\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\r\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\r\n      return cont(expr);\r\n    }\r\n    if (type == \"quasi\") { return pass(quasi, me); }\r\n    if (type == \";\") return;\r\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\r\n    if (type == \".\") return cont(property, me);\r\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\r\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\r\n    if (type == \"regexp\") {\r\n      cx.state.lastType = cx.marked = \"operator\"\r\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\r\n      return cont(expr)\r\n    }\r\n  }\r\n  function quasi(type, value) {\r\n    if (type != \"quasi\") return pass();\r\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\r\n    return cont(maybeexpression, continueQuasi);\r\n  }\r\n  function continueQuasi(type) {\r\n    if (type == \"}\") {\r\n      cx.marked = \"string-2\";\r\n      cx.state.tokenize = tokenQuasi;\r\n      return cont(quasi);\r\n    }\r\n  }\r\n  function arrowBody(type) {\r\n    findFatArrow(cx.stream, cx.state);\r\n    return pass(type == \"{\" ? statement : expression);\r\n  }\r\n  function arrowBodyNoComma(type) {\r\n    findFatArrow(cx.stream, cx.state);\r\n    return pass(type == \"{\" ? statement : expressionNoComma);\r\n  }\r\n  function maybeTarget(noComma) {\r\n    return function(type) {\r\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\r\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\r\n      else return pass(noComma ? expressionNoComma : expression);\r\n    };\r\n  }\r\n  function target(_, value) {\r\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\r\n  }\r\n  function targetNoComma(_, value) {\r\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\r\n  }\r\n  function maybelabel(type) {\r\n    if (type == \":\") return cont(poplex, statement);\r\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\r\n  }\r\n  function property(type) {\r\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\r\n  }\r\n  function objprop(type, value) {\r\n    if (type == \"async\") {\r\n      cx.marked = \"property\";\r\n      return cont(objprop);\r\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\r\n      cx.marked = \"property\";\r\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\r\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\r\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\r\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\r\n      return cont(afterprop);\r\n    } else if (type == \"number\" || type == \"string\") {\r\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\r\n      return cont(afterprop);\r\n    } else if (type == \"jsonld-keyword\") {\r\n      return cont(afterprop);\r\n    } else if (isTS && isModifier(value)) {\r\n      cx.marked = \"keyword\"\r\n      return cont(objprop)\r\n    } else if (type == \"[\") {\r\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\r\n    } else if (type == \"spread\") {\r\n      return cont(expressionNoComma, afterprop);\r\n    } else if (value == \"*\") {\r\n      cx.marked = \"keyword\";\r\n      return cont(objprop);\r\n    } else if (type == \":\") {\r\n      return pass(afterprop)\r\n    }\r\n  }\r\n  function getterSetter(type) {\r\n    if (type != \"variable\") return pass(afterprop);\r\n    cx.marked = \"property\";\r\n    return cont(functiondef);\r\n  }\r\n  function afterprop(type) {\r\n    if (type == \":\") return cont(expressionNoComma);\r\n    if (type == \"(\") return pass(functiondef);\r\n  }\r\n  function commasep(what, end, sep) {\r\n    function proceed(type, value) {\r\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\r\n        var lex = cx.state.lexical;\r\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\r\n        return cont(function(type, value) {\r\n          if (type == end || value == end) return pass()\r\n          return pass(what)\r\n        }, proceed);\r\n      }\r\n      if (type == end || value == end) return cont();\r\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\r\n      return cont(expect(end));\r\n    }\r\n    return function(type, value) {\r\n      if (type == end || value == end) return cont();\r\n      return pass(what, proceed);\r\n    };\r\n  }\r\n  function contCommasep(what, end, info) {\r\n    for (var i = 3; i < arguments.length; i++)\r\n      cx.cc.push(arguments[i]);\r\n    return cont(pushlex(end, info), commasep(what, end), poplex);\r\n  }\r\n  function block(type) {\r\n    if (type == \"}\") return cont();\r\n    return pass(statement, block);\r\n  }\r\n  function maybetype(type, value) {\r\n    if (isTS) {\r\n      if (type == \":\") return cont(typeexpr);\r\n      if (value == \"?\") return cont(maybetype);\r\n    }\r\n  }\r\n  function maybetypeOrIn(type, value) {\r\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\r\n  }\r\n  function mayberettype(type) {\r\n    if (isTS && type == \":\") {\r\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\r\n      else return cont(typeexpr)\r\n    }\r\n  }\r\n  function isKW(_, value) {\r\n    if (value == \"is\") {\r\n      cx.marked = \"keyword\"\r\n      return cont()\r\n    }\r\n  }\r\n  function typeexpr(type, value) {\r\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\r\n      cx.marked = \"keyword\"\r\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\r\n    }\r\n    if (type == \"variable\" || value == \"void\") {\r\n      cx.marked = \"type\"\r\n      return cont(afterType)\r\n    }\r\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\r\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\r\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\r\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\r\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\r\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\r\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\r\n  }\r\n  function maybeReturnType(type) {\r\n    if (type == \"=>\") return cont(typeexpr)\r\n  }\r\n  function typeprops(type) {\r\n    if (type.match(/[\\}\\)\\]]/)) return cont()\r\n    if (type == \",\" || type == \";\") return cont(typeprops)\r\n    return pass(typeprop, typeprops)\r\n  }\r\n  function typeprop(type, value) {\r\n    if (type == \"variable\" || cx.style == \"keyword\") {\r\n      cx.marked = \"property\"\r\n      return cont(typeprop)\r\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\r\n      return cont(typeprop)\r\n    } else if (type == \":\") {\r\n      return cont(typeexpr)\r\n    } else if (type == \"[\") {\r\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\r\n    } else if (type == \"(\") {\r\n      return pass(functiondecl, typeprop)\r\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\r\n      return cont()\r\n    }\r\n  }\r\n  function quasiType(type, value) {\r\n    if (type != \"quasi\") return pass();\r\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\r\n    return cont(typeexpr, continueQuasiType);\r\n  }\r\n  function continueQuasiType(type) {\r\n    if (type == \"}\") {\r\n      cx.marked = \"string-2\";\r\n      cx.state.tokenize = tokenQuasi;\r\n      return cont(quasiType);\r\n    }\r\n  }\r\n  function typearg(type, value) {\r\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\r\n    if (type == \":\") return cont(typeexpr)\r\n    if (type == \"spread\") return cont(typearg)\r\n    return pass(typeexpr)\r\n  }\r\n  function afterType(type, value) {\r\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\r\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\r\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\r\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\r\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\r\n  }\r\n  function maybeTypeArgs(_, value) {\r\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\r\n  }\r\n  function typeparam() {\r\n    return pass(typeexpr, maybeTypeDefault)\r\n  }\r\n  function maybeTypeDefault(_, value) {\r\n    if (value == \"=\") return cont(typeexpr)\r\n  }\r\n  function vardef(_, value) {\r\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\r\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\r\n  }\r\n  function pattern(type, value) {\r\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\r\n    if (type == \"variable\") { register(value); return cont(); }\r\n    if (type == \"spread\") return cont(pattern);\r\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\r\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\r\n  }\r\n  function proppattern(type, value) {\r\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\r\n      register(value);\r\n      return cont(maybeAssign);\r\n    }\r\n    if (type == \"variable\") cx.marked = \"property\";\r\n    if (type == \"spread\") return cont(pattern);\r\n    if (type == \"}\") return pass();\r\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\r\n    return cont(expect(\":\"), pattern, maybeAssign);\r\n  }\r\n  function eltpattern() {\r\n    return pass(pattern, maybeAssign)\r\n  }\r\n  function maybeAssign(_type, value) {\r\n    if (value == \"=\") return cont(expressionNoComma);\r\n  }\r\n  function vardefCont(type) {\r\n    if (type == \",\") return cont(vardef);\r\n  }\r\n  function maybeelse(type, value) {\r\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\r\n  }\r\n  function forspec(type, value) {\r\n    if (value == \"await\") return cont(forspec);\r\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\r\n  }\r\n  function forspec1(type) {\r\n    if (type == \"var\") return cont(vardef, forspec2);\r\n    if (type == \"variable\") return cont(forspec2);\r\n    return pass(forspec2)\r\n  }\r\n  function forspec2(type, value) {\r\n    if (type == \")\") return cont()\r\n    if (type == \";\") return cont(forspec2)\r\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\r\n    return pass(expression, forspec2)\r\n  }\r\n  function functiondef(type, value) {\r\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\r\n    if (type == \"variable\") {register(value); return cont(functiondef);}\r\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\r\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\r\n  }\r\n  function functiondecl(type, value) {\r\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\r\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\r\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\r\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\r\n  }\r\n  function typename(type, value) {\r\n    if (type == \"keyword\" || type == \"variable\") {\r\n      cx.marked = \"type\"\r\n      return cont(typename)\r\n    } else if (value == \"<\") {\r\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\r\n    }\r\n  }\r\n  function funarg(type, value) {\r\n    if (value == \"@\") cont(expression, funarg)\r\n    if (type == \"spread\") return cont(funarg);\r\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\r\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\r\n    return pass(pattern, maybetype, maybeAssign);\r\n  }\r\n  function classExpression(type, value) {\r\n    // Class expressions may have an optional name.\r\n    if (type == \"variable\") return className(type, value);\r\n    return classNameAfter(type, value);\r\n  }\r\n  function className(type, value) {\r\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\r\n  }\r\n  function classNameAfter(type, value) {\r\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\r\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\r\n      if (value == \"implements\") cx.marked = \"keyword\";\r\n      return cont(isTS ? typeexpr : expression, classNameAfter);\r\n    }\r\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\r\n  }\r\n  function classBody(type, value) {\r\n    if (type == \"async\" ||\r\n        (type == \"variable\" &&\r\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\r\n         cx.stream.match(/^\\s+#?[\\w$\\xa1-\\uffff]/, false))) {\r\n      cx.marked = \"keyword\";\r\n      return cont(classBody);\r\n    }\r\n    if (type == \"variable\" || cx.style == \"keyword\") {\r\n      cx.marked = \"property\";\r\n      return cont(classfield, classBody);\r\n    }\r\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\r\n    if (type == \"[\")\r\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\r\n    if (value == \"*\") {\r\n      cx.marked = \"keyword\";\r\n      return cont(classBody);\r\n    }\r\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\r\n    if (type == \";\" || type == \",\") return cont(classBody);\r\n    if (type == \"}\") return cont();\r\n    if (value == \"@\") return cont(expression, classBody)\r\n  }\r\n  function classfield(type, value) {\r\n    if (value == \"!\") return cont(classfield)\r\n    if (value == \"?\") return cont(classfield)\r\n    if (type == \":\") return cont(typeexpr, maybeAssign)\r\n    if (value == \"=\") return cont(expressionNoComma)\r\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\r\n    return pass(isInterface ? functiondecl : functiondef)\r\n  }\r\n  function afterExport(type, value) {\r\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\r\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\r\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\r\n    return pass(statement);\r\n  }\r\n  function exportField(type, value) {\r\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\r\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\r\n  }\r\n  function afterImport(type) {\r\n    if (type == \"string\") return cont();\r\n    if (type == \"(\") return pass(expression);\r\n    if (type == \".\") return pass(maybeoperatorComma);\r\n    return pass(importSpec, maybeMoreImports, maybeFrom);\r\n  }\r\n  function importSpec(type, value) {\r\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\r\n    if (type == \"variable\") register(value);\r\n    if (value == \"*\") cx.marked = \"keyword\";\r\n    return cont(maybeAs);\r\n  }\r\n  function maybeMoreImports(type) {\r\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\r\n  }\r\n  function maybeAs(_type, value) {\r\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\r\n  }\r\n  function maybeFrom(_type, value) {\r\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\r\n  }\r\n  function arrayLiteral(type) {\r\n    if (type == \"]\") return cont();\r\n    return pass(commasep(expressionNoComma, \"]\"));\r\n  }\r\n  function enumdef() {\r\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\r\n  }\r\n  function enummember() {\r\n    return pass(pattern, maybeAssign);\r\n  }\r\n\r\n  function isContinuedStatement(state, textAfter) {\r\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\r\n      isOperatorChar.test(textAfter.charAt(0)) ||\r\n      /[,.]/.test(textAfter.charAt(0));\r\n  }\r\n\r\n  function expressionAllowed(stream, state, backUp) {\r\n    return state.tokenize == tokenBase &&\r\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\r\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\r\n  }\r\n\r\n  // Interface\r\n\r\n  return {\r\n    startState: function(basecolumn) {\r\n      var state = {\r\n        tokenize: tokenBase,\r\n        lastType: \"sof\",\r\n        cc: [],\r\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\r\n        localVars: parserConfig.localVars,\r\n        context: parserConfig.localVars && new Context(null, null, false),\r\n        indented: basecolumn || 0\r\n      };\r\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\r\n        state.globalVars = parserConfig.globalVars;\r\n      return state;\r\n    },\r\n\r\n    token: function(stream, state) {\r\n      if (stream.sol()) {\r\n        if (!state.lexical.hasOwnProperty(\"align\"))\r\n          state.lexical.align = false;\r\n        state.indented = stream.indentation();\r\n        findFatArrow(stream, state);\r\n      }\r\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\r\n      var style = state.tokenize(stream, state);\r\n      if (type == \"comment\") return style;\r\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\r\n      return parseJS(state, style, type, content, stream);\r\n    },\r\n\r\n    indent: function(state, textAfter) {\r\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\r\n      if (state.tokenize != tokenBase) return 0;\r\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\r\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\r\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\r\n        var c = state.cc[i];\r\n        if (c == poplex) lexical = lexical.prev;\r\n        else if (c != maybeelse && c != popcontext) break;\r\n      }\r\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\r\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\r\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\r\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\r\n        lexical = lexical.prev;\r\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\r\n        lexical = lexical.prev;\r\n      var type = lexical.type, closing = firstChar == type;\r\n\r\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\r\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\r\n      else if (type == \"form\") return lexical.indented + indentUnit;\r\n      else if (type == \"stat\")\r\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\r\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\r\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\r\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\r\n      else return lexical.indented + (closing ? 0 : indentUnit);\r\n    },\r\n\r\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\r\n    blockCommentStart: jsonMode ? null : \"/*\",\r\n    blockCommentEnd: jsonMode ? null : \"*/\",\r\n    blockCommentContinue: jsonMode ? null : \" * \",\r\n    lineComment: jsonMode ? null : \"//\",\r\n    fold: \"brace\",\r\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\r\n\r\n    helperType: jsonMode ? \"json\" : \"javascript\",\r\n    jsonldMode: jsonldMode,\r\n    jsonMode: jsonMode,\r\n\r\n    expressionAllowed: expressionAllowed,\r\n\r\n    skipExpression: function(state) {\r\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\r\n    }\r\n  };\r\n});\r\n\r\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\r\n\r\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\r\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\r\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\r\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\r\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\r\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\r\n\r\n});\r\n"],
  "mappings": "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",
  "names": ["CodeMirror", "type", "cont", "cx", "content", "block", "value"]
}
