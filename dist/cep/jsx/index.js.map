{"version":3,"file":"index.js","sources":["../../../cep.config.ts","../../../src/shared/shared.ts","../../../src/jsx/aeft/aeft-utils.ts","../../../src/jsx/aeft/aeft.ts","../../../src/jsx/index.ts"],"sourcesContent":["import { CEP_Config } from \"vite-cep-plugin\";\r\nimport { version } from \"./package.json\";\r\n\r\n\r\nconst config: CEP_Config = {\r\n  version,\r\n  id: \"com.RenderLogistic.cep\",\r\n  displayName: \"Render Logistic\",\r\n  symlink: \"local\",\r\n  port: 1399,\r\n  servePort: 5000,\r\n  startingDebugPort: 9999,\r\n  extensionManifestVersion: 6.0,\r\n  requiredRuntimeVersion: 9.0,\r\n  hosts: [\r\n    { name: \"AEFT\", version: \"[0.0,99.9]\" }\r\n  ],\r\n  type: \"Panel\",\r\n  iconDarkNormal: \"./src/assets/light-icon.png\",\r\n  iconNormal: \"./src/assets/dark-icon.png\",\r\n  iconDarkNormalRollOver: \"./src/assets/light-icon.png\",\r\n  iconNormalRollOver: \"./src/assets/dark-icon.png\",\r\n  parameters: [\"--v=0\", \"--enable-nodejs\", \"--mixed-context\"],\r\n  width: 600,\r\n  height: 550,\r\n\r\n  panels: [\r\n    {\r\n      mainPath: \"./main/index.html\",\r\n      name: \"main\",\r\n      panelDisplayName: \"Render Logistic\",\r\n      autoVisible: true,\r\n      width: 600,\r\n      height: 650,\r\n    },\r\n\r\n  ],\r\n  build: {\r\n    jsxBin: \"off\",\r\n    sourceMap: true,\r\n  },\r\n  zxp: {\r\n    country: \"AL\",\r\n    province: \"TR\",\r\n    org: \"prodata.dev\",\r\n    password: \"mypassword\",\r\n    tsa: \"http://timestamp.digicert.com/\",\r\n    sourceMap: false,\r\n    jsxBin: \"off\",\r\n  },\r\n  installModules: [],\r\n  copyAssets: [],\r\n  copyZipAssets: [],\r\n};\r\nexport default config;\r\n","import config from \"../../cep.config\";\r\nexport const ns = config.id;\r\n","export const forEachLayer = (\r\n  comp: CompItem,\r\n  callback: (item: Layer, index: number) => void\r\n) => {\r\n  const len = comp.numLayers;\r\n  for (let i = 1; i < len + 1; i++) {\r\n    callback(comp.layers[i], i);\r\n  }\r\n};\r\n\r\nexport const forEachComp = (\r\n  folder: FolderItem | Project,\r\n  callback: (item: CompItem, index: number) => void\r\n) => {\r\n  const len = folder.numItems;\r\n  let comps: CompItem[] = [];\r\n  for (let i = 1; i < len + 1; i++) {\r\n    const item = folder.items[i];\r\n    if (item instanceof CompItem) {\r\n      comps.push(item);\r\n    }\r\n  }\r\n  for (let i = 0; i < comps.length; i++) {\r\n    let comp = comps[i];\r\n    callback(comp, i);\r\n  }\r\n};\r\n\r\nexport const compFromFootage = (item: FootageItem): CompItem => {\r\n  return app.project.items.addComp(\r\n    item.name,\r\n    item.width,\r\n    item.height,\r\n    item.pixelAspect,\r\n    item.duration,\r\n    item.frameRate\r\n  );\r\n};\r\n\r\nexport const getProjectDir = () => {\r\n  app.project.file;\r\n  if (app.project.file !== null) {\r\n    return app.project.file.parent;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const getActiveComp = () => {\r\n  if (app.project.activeItem instanceof CompItem === false) {\r\n    app.activeViewer?.setActive();\r\n  }\r\n  return app.project.activeItem as CompItem;\r\n};\r\n\r\n// Project Item Helpers\r\n\r\nexport const getItemByName = (parent: FolderItem, name: string) => {\r\n  for (var i = 0; i < parent.numItems; i++) {\r\n    const item = parent.items[i + 1];\r\n    if (item.name === name) {\r\n      return item;\r\n    }\r\n  }\r\n};\r\n\r\n// Metadata helpers\r\n\r\nexport const setAeMetadata = (propName: string, propValue: any) => {\r\n  if (ExternalObject.AdobeXMPScript === undefined) {\r\n    ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\r\n  }\r\n  if (!app.project || !ExternalObject.AdobeXMPScript || !XMPMeta) return;\r\n  const prefix = \"xmp:\";\r\n  const uri = XMPMeta.getNamespaceURI(prefix);\r\n  const newPropName = prefix + propName;\r\n  let metadata = new XMPMeta(app.project.xmpPacket);\r\n  metadata.setProperty(uri, newPropName, propValue.toString());\r\n  app.project.xmpPacket = metadata.serialize();\r\n};\r\n\r\nexport const getAeMetadata = (propName: string) => {\r\n  if (ExternalObject.AdobeXMPScript === undefined) {\r\n    ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\r\n  }\r\n  if (!app.project || !ExternalObject.AdobeXMPScript || !XMPMeta) return;\r\n  const prefix = \"xmp:\";\r\n  const uri = XMPMeta.getNamespaceURI(prefix);\r\n  const newPropName = prefix + propName;\r\n  const metadata = new XMPMeta(app.project.xmpPacket);\r\n  return metadata.getProperty(uri, newPropName);\r\n};\r\n","import { getActiveComp } from \"./aeft-utils\";\r\n\r\nexport const getSelectedAVLayers = () => {\r\n    app.activeViewer?.setActive();\r\n    const activeItem = app.project.activeItem;\r\n    if (activeItem && activeItem instanceof CompItem === true && activeItem.selectedLayers.length) {\r\n      let selectedLayers = [];\r\n      for (let i = 0; i < activeItem.selectedLayers.length; i++) {\r\n        let item = activeItem.selectedLayers[i];\r\n        if (item instanceof AVLayer) {\r\n          selectedLayers.push(item);\r\n        }\r\n      }\r\n      return selectedLayers;\r\n    }\r\n  };\r\n\r\nexport const getSelectedPropertyPath = () => {\r\n\r\n    const comp = getActiveComp();\r\n\r\n    function findDeepestSelectedProp() {\r\n        let deepestProp, numDeepestProps = 0, deepestPropDepth = 0;\r\n        for (let i = 0; i < comp.selectedProperties.length; i++) {\r\n            var prop = comp.selectedProperties[i];\r\n            if (prop.propertyDepth >= deepestPropDepth) {\r\n                if (prop.propertyDepth > deepestPropDepth) numDeepestProps = 0;\r\n                deepestProp = prop;\r\n                numDeepestProps++;\r\n                deepestPropDepth = prop.propertyDepth;\r\n            }\r\n        }\r\n        return (numDeepestProps > 1) ? null : deepestProp;\r\n    }\r\n\r\n    let prop = findDeepestSelectedProp();\r\n    if (\r\n        prop === null\r\n        || prop === undefined\r\n        || prop.value === undefined\r\n        || comp.selectedLayers.length === 0\r\n    ) {\r\n        alert(\"Please select a single property that holds a value.\");\r\n        return;\r\n    }\r\n\r\n    let scriptCode = \"\";\r\n    let currProp = prop;\r\n    while (currProp !== null) {\r\n        if (currProp.propertyIndex < 1) {\r\n            scriptCode = \".layer(\\\"\" + currProp.name + \"\\\")\" + scriptCode;\r\n        } else {\r\n            scriptCode = \".property(\\\"\" + currProp.name + \"\\\")\" + scriptCode;\r\n            // scriptCode = \".property(\" + currProp.propertyIndex + \")\" + scriptCode;\r\n        }\r\n        currProp = currProp.parentProperty;\r\n    }\r\n\r\n    const compID = comp.id;\r\n    const fullPath = \"app.project.itemByID(\" + compID + \")\" + scriptCode;\r\n    // var fullPathWithFunction = \"(function() {return app.project.itemByID(\" + compID + \")\" + scriptCode + \"})()\";\r\n    // var val = eval(fullPath);\r\n    // alert(val);\r\n    return fullPath;\r\n};","// @include './lib/json2.js'\r\n\r\nimport { ns } from \"../shared/shared\";\r\n\r\nimport * as aeft from \"./aeft/aeft\";\r\n\r\n//@ts-ignore\r\nconst host = typeof $ !== \"undefined\" ? $ : window;\r\n\r\nswitch (BridgeTalk.appName as ApplicationName) {\r\n  case \"aftereffects\":\r\n  case \"aftereffectsbeta\":\r\n    host[ns] = aeft;\r\n    break;\r\n}\r\n\r\nexport type Scripts = typeof aeft\r\n\r\n// https://extendscript.docsforadobe.dev/interapplication-communication/bridgetalk-class.html?highlight=bridgetalk#appname\r\ntype ApplicationName =\r\n  | \"aftereffects\"\r\n  | \"aftereffectsbeta\"\r\n  | \"ame\"\r\n  | \"amebeta\"\r\n  | \"audition\"\r\n  | \"auditionbeta\"\r\n  | \"bridge\"\r\n  | \"bridgebeta\"\r\n  // | \"flash\"\r\n  | \"illustrator\"\r\n  | \"illustratorbeta\"\r\n  | \"indesign\"\r\n  | \"indesignbeta\"\r\n  // | \"indesignserver\"\r\n  | \"photoshop\"\r\n  | \"photoshopbeta\"\r\n  | \"premierepro\"\r\n  | \"premiereprobeta\";\r\n"],"names":["version","id","displayName","symlink","port","servePort","startingDebugPort","extensionManifestVersion","requiredRuntimeVersion","hosts","name","type","iconDarkNormal","iconNormal","iconDarkNormalRollOver","iconNormalRollOver","parameters","width","height","panels","mainPath","panelDisplayName","autoVisible","build","jsxBin","sourceMap","zxp","country","province","org","password","tsa","installModules","copyAssets","copyZipAssets","selectedLayers","numDeepestProps","deepestPropDepth","deepestProp","host"],"mappings":";;AAIA;AACEA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACIC;AAAcV;AAAsB;AAExCW;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAEAC;AAEIC;AACAV;AACAW;AACAC;AACAL;AACAC;AACF;AAGFK;AACEC;AACAC;;AAEFC;AACEC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAD;;AAEFQ;AACAC;AACAC;AACF;;ACpDA;;AC+CA;;AAC4D;AACxD;AACF;AACA;AACF;;ACnDA;AAAyC;AACrC;AACA;AACA;;AAEE;AACE;;AAEEC;AACF;AACF;AACA;AACF;AACF;AAEF;AAEI;;AAGI;AAAiBC;AAAqBC;AACtC;AACI;AACA;;AAEIC;AACAF;;AAEJ;AACJ;AACA;AACJ;AAEA;;;AAQI;AACJ;;;;AAKI;;AAEA;;AAEI;AACJ;;AAEJ;AAEA;;AAEA;AACA;AACA;AACA;AACJ;;;;;;;;ACzDA;AAEA;AACE;AACA;AACEG;AACA;AACJ;;AAIA"}